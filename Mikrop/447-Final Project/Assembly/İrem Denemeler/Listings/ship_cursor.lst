


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ******** 
    2 00000000         ; EQU Directives
    3 00000000         ; These directives do not allocate memory
    4 00000000         ;*******************************************************
                       ********
    5 00000000         ;SYMBOL    DIRECTIVE VALUE   COMMENT
    6 00000000 40005008 
                       OUT_PORTB_DC
                               EQU              0x40005008  ;00000010
    7 00000000         
    8 00000000 20001000 
                       OLD_SHIP_LOC_X
                               EQU              0x20001000  ;1000
    9 00000000 20001001 
                       OLD_SHIP_LOC_Y
                               EQU              0x20001001  ;1001
   10 00000000 20000600 
                       PLAYFIELD
                               EQU              0x20000600  ;600-7F7
   11 00000000 20000800 
                       SHIP_EMPTY
                               EQU              0x20000800  ;800-807
   12 00000000 20000808 
                       SHIP_CIVIL
                               EQU              0x20000808  ;808-80F
   13 00000000 20000810 
                       SHIP_BATTLE
                               EQU              0x20000810  ;810-817
   14 00000000         ;*******************************************************
                       ********
   15 00000000         ; Directives - This Data Section is part of the code
   16 00000000         ; It is in the read only section  so values cannot be ch
                       anged.
   17 00000000         ;*******************************************************
                       ******** 
   18 00000000         ;LABEL  DIRECTIVE VALUE     COMMENT
   19 00000000                 AREA             sdata, DATA, READONLY
   20 00000000                 THUMB
   21 00000000         
   22 00000000         ;*******************************************************
                       ********
   23 00000000         ; Program section           
   24 00000000         ;*******************************************************
                       ********
   25 00000000         ;LABEL  DIRECTIVE VALUE     COMMENT
   26 00000000                 AREA             routines,READONLY,CODE
   27 00000000                 THUMB
   28 00000000                 ALIGN
   29 00000000                 EXTERN           DELAY_1ms
   30 00000000                 EXTERN           ADDRESS_CHANGE
   31 00000000                 EXTERN           DATA_WRITE
   32 00000000                 EXPORT           SHIP_CURSOR
   33 00000000         
   34 00000000         ;*******************************************************
                       ********
   35 00000000         ; Main Function
   36 00000000         ; Takes Op mode, y location and x location
   37 00000000         ; Data format M = 



ARM Macro Assembler    Page 2 


   38 00000000         ; 0000.00MM.0000.0000.YYYY.YYYY.XXXX.XXXX
   39 00000000         ;*******************************************************
                       ******** 
   40 00000000         ;LABEL  DIRECTIVE VALUE     COMMENT
   41 00000000         
   42 00000000         SHIP_CURSOR
                               PROC
   43 00000000 B500            PUSH             {LR}
   44 00000002 B41F            PUSH             {R0-R4}
   45 00000004         
   46 00000004 4D86            LDR              R5,=OLD_SHIP_LOC_Y
   47 00000006 7828            LDRB             R0,[R5]
   48 00000008 EA4F 2000       LSL              R0,R0,#8
   49 0000000C 4D85            LDR              R5,=OLD_SHIP_LOC_X
   50 0000000E 7829            LDRB             R1,[R5]
   51 00000010 4408            ADD              R0,R0,R1
   52 00000012 F64F 72FF       LDR              R2,=0xFFFF
   53 00000016 EA04 0102       AND              R1,R4,R2    ;Compare new locati
                                                            on with old one
   54 0000001A B410            PUSH             {R4}        ;Save R4 
   55 0000001C 4281            CMP              R1,R0
   56 0000001E D035            BEQ              Skip_clear  ;if they are same s
                                                            kip clear phase
   57 00000020         ;*******************************************************
                       ********
   58 00000020         ;clear screen stage
   59 00000020         ;*******************************************************
                       ********
   60 00000020         Clear
   61 00000020 4D7F            LDR              R5,=OLD_SHIP_LOC_Y
   62 00000022 7828            LDRB             R0,[R5]
   63 00000024 EA4F 00D0       LSR              R0,R0,#3    ;Extract the fracti
                                                            onal part
   64 00000028 EA4F 2400       LSL              R4,R0,#8
   65 0000002C         
   66 0000002C 4D7D            LDR              R5,=OLD_SHIP_LOC_X
   67 0000002E 7829            LDRB             R1,[R5]
   68 00000030 440C            ADD              R4,R4,R1    ;create Yloc-Xloc s
                                                            tructure for addres
                                                            s change
   69 00000032 F7FF FFFE       BL               ADDRESS_CHANGE
   70 00000036         
   71 00000036 F04F 0354       MOV              R3,#0x54
   72 0000003A FB00 F203       MUL              R2,R0,R3    ;multiply Y coordin
                                                            ate with 84
   73 0000003E 440A            ADD              R2,R2,R1    ;find vertical mode
                                                             address of pixel
   74 00000040         
   75 00000040 4D79            LDR              R5,=PLAYFIELD
   76 00000042 4415            ADD              R5,R5,R2    ;find corresponding
                                                             address of R5
   77 00000044 F04F 0308       MOV              R3,#8       ;write 8 byte of da
                                                            ta
   78 00000048         
   79 00000048 F815 4B01 
                       playfield
                               LDRB             R4,[R5],#1
   80 0000004C F7FF FFFE       BL               DATA_WRITE
   81 00000050 1E5B            SUBS             R3,R3,#1



ARM Macro Assembler    Page 3 


   82 00000052 D1F9            BNE              playfield
   83 00000054         
   84 00000054         
   85 00000054 4B72            LDR              R3,=OLD_SHIP_LOC_Y
   86 00000056 7818            LDRB             R0,[R3]
   87 00000058 F010 0107       ANDS             R1,R0,#0x07 ;control fractional
                                                             part
   88 0000005C D016            BEQ              Skip_clear
   89 0000005E         
   90 0000005E 4B70            LDR              R3,=OLD_SHIP_LOC_Y
   91 00000060 7818            LDRB             R0,[R3]
   92 00000062 EA4F 00D0       LSR              R0,R0,#3    ;Extract the fracti
                                                            onal part
   93 00000066 EA4F 2400       LSL              R4,R0,#8
   94 0000006A         
   95 0000006A 4B6E            LDR              R3,=OLD_SHIP_LOC_X
   96 0000006C 7819            LDRB             R1,[R3]
   97 0000006E 440C            ADD              R4,R4,R1    ;create Yloc-Xloc s
                                                            tructure for addres
                                                            s change
   98 00000070 F504 7480       ADD              R4,R4,#0x100 ;jump to next line
                                                            
   99 00000074 F7FF FFFE       BL               ADDRESS_CHANGE
  100 00000078         
  101 00000078 F105 054C       ADD              R5,R5,#0x4C
  102 0000007C F04F 0308       MOV              R3,#8
  103 00000080         
  104 00000080 F815 4B01 
                       playfield2
                               LDRB             R4,[R5],#1
  105 00000084 F7FF FFFE       BL               DATA_WRITE
  106 00000088 1E5B            SUBS             R3,R3,#1
  107 0000008A D1F9            BNE              playfield2
  108 0000008C         
  109 0000008C         ;*******************************************************
                       ********
  110 0000008C         ; case determine stage
  111 0000008C         ;*******************************************************
                       ********
  112 0000008C         
  113 0000008C BC10    Skip_clear
                               POP              {R4}
  114 0000008E EA4F 6314       LSR              R3,R4,#0x18 ;extact operation f
                                                            rom coordinates
  115 00000092         
  116 00000092 4D64            LDR              R5,=OLD_SHIP_LOC_X
  117 00000094 F004 00FF       AND              R0,R4,#0xFF
  118 00000098 7028            STRB             R0,[R5]
  119 0000009A 4D61            LDR              R5,=OLD_SHIP_LOC_Y
  120 0000009C F404 407F       AND              R0,R4,#0xFF00
  121 000000A0 EA4F 2010       LSR              R0,R0,#8
  122 000000A4 7028            STRB             R0,[R5]
  123 000000A6         
  124 000000A6         
  125 000000A6 2B01            CMP              R3,#0x01
  126 000000A8 D002            BEQ              civilian
  127 000000AA 2B10            CMP              R3,#0x10
  128 000000AC D035            BEQ              battleship
  129 000000AE E069            B                on_screen



ARM Macro Assembler    Page 4 


  130 000000B0         
  131 000000B0         ;*******************************************************
                       ********
  132 000000B0         ;Civilian ship stage
  133 000000B0         ;*******************************************************
                       ********
  134 000000B0         
  135 000000B0 4D5C    civilian
                               LDR              R5,=OLD_SHIP_LOC_X ;extract X c
                                                            oordinate
  136 000000B2 7828            LDRB             R0,[R5]
  137 000000B4 4D5A            LDR              R5,=OLD_SHIP_LOC_Y ;extract Y c
                                                            oordinate
  138 000000B6 7829            LDRB             R1,[R5]
  139 000000B8 F001 0207       AND              R2,R1,#0x07 ;extract fractional
                                                             Y coordinate
  140 000000BC EA4F 01D1       LSR              R1,R1,#0x03 ;extract whole part
                                                            
  141 000000C0         
  142 000000C0 F04F 0354       MOV              R3,#0x54
  143 000000C4 FB01 F303       MUL              R3,R1,R3    ;multiply Y coordin
                                                            ate with 84
  144 000000C8 4403            ADD              R3,R3,R0    ;find vertical mode
                                                             address of pixel
  145 000000CA         
  146 000000CA 4D57            LDR              R5,=PLAYFIELD ;take playfield a
                                                            ddress for writing 
                                                            op
  147 000000CC 441D            ADD              R5,R5,R3    ;adjust to ship loc
                                                            ation
  148 000000CE 4E57            LDR              R6,=SHIP_CIVIL ;take civilian s
                                                            hip pattern
  149 000000D0 F04F 0308       MOV              R3,#8
  150 000000D4         
  151 000000D4 7828    civ_memo
                               LDRB             R0,[R5]
  152 000000D6 F816 1B01       LDRB             R1,[R6],#1
  153 000000DA FA01 F102       LSL              R1,R1,R2    ;shift with fractio
                                                            nal part to adjust 
                                                            ship
  154 000000DE F001 01FF       AND              R1,R1,#0xFF
  155 000000E2 EA41 0100       ORR              R1,R1,R0    ;combine field data
                                                             with ship data
  156 000000E6 F805 1B01       STRB             R1,[R5],#1  ;write into the mem
                                                            ory
  157 000000EA 1E5B            SUBS             R3,R3,#1
  158 000000EC D1F2            BNE              civ_memo
  159 000000EE         
  160 000000EE 2A00            CMP              R2,#0x00    ;if data is divided
                                                             repeat same step f
                                                            or
  161 000000F0 D048            BEQ              on_screen   ;lower byte frames
  162 000000F2 F04F 0308       MOV              R3,#8
  163 000000F6         
  164 000000F6 F105 054C       ADD              R5,R5,#0x4C
  165 000000FA F1A6 0608       SUB              R6,R6,#0x08
  166 000000FE F816 1B01 
                       civ_memo2
                               LDRB             R1,[R6],#1



ARM Macro Assembler    Page 5 


  167 00000102 FA01 F102       LSL              R1,R1,R2
  168 00000106 EA4F 2111       LSR              R1,R1,#8
  169 0000010A 7828            LDRB             R0,[R5]
  170 0000010C EA41 0100       ORR              R1,R1,R0
  171 00000110 F805 1B01       STRB             R1,[R5],#1
  172 00000114 1E5B            SUBS             R3,R3,#1
  173 00000116 D1F2            BNE              civ_memo2
  174 00000118         
  175 00000118 E034            B                on_screen
  176 0000011A         
  177 0000011A         ;*******************************************************
                       ********
  178 0000011A         ;Battleship stage
  179 0000011A         ;*******************************************************
                       ********
  180 0000011A         
  181 0000011A 4D42    battleship
                               LDR              R5,=OLD_SHIP_LOC_X ;extract X c
                                                            oordinate
  182 0000011C 7828            LDRB             R0,[R5]
  183 0000011E 4D40            LDR              R5,=OLD_SHIP_LOC_Y ;extract Y c
                                                            oordinate
  184 00000120 7829            LDRB             R1,[R5]
  185 00000122 F001 0207       AND              R2,R1,#0x07 ;extract fractional
                                                             Y coordinate
  186 00000126 EA4F 01D1       LSR              R1,R1,#0x03 ;extract whole part
                                                            
  187 0000012A         
  188 0000012A F04F 0354       MOV              R3,#0x54
  189 0000012E FB01 F303       MUL              R3,R1,R3    ;multiply Y coordin
                                                            ate with 84
  190 00000132 4403            ADD              R3,R3,R0    ;find vertical mode
                                                             address of pixel
  191 00000134         
  192 00000134 4D3C            LDR              R5,=PLAYFIELD ;take playfield a
                                                            ddress for writing 
                                                            op
  193 00000136 441D            ADD              R5,R5,R3    ;adjust to ship loc
                                                            ation
  194 00000138 4E3D            LDR              R6,=SHIP_BATTLE ;take battle sh
                                                            ip pattern
  195 0000013A F04F 0308       MOV              R3,#8
  196 0000013E         
  197 0000013E 7828    bat_memo
                               LDRB             R0,[R5]
  198 00000140 F816 1B01       LDRB             R1,[R6],#1
  199 00000144 FA01 F102       LSL              R1,R1,R2    ;shift with fractio
                                                            nal part to adjust 
                                                            ship
  200 00000148 F001 01FF       AND              R1,R1,#0xFF
  201 0000014C EA41 0100       ORR              R1,R1,R0    ;combine field data
                                                             with ship data
  202 00000150 F805 1B01       STRB             R1,[R5],#1  ;write into the mem
                                                            ory
  203 00000154 1E5B            SUBS             R3,R3,#1
  204 00000156 D1F2            BNE              bat_memo
  205 00000158         
  206 00000158 2A00            CMP              R2,#0x00    ;if data is divided
                                                             repeat same step f



ARM Macro Assembler    Page 6 


                                                            or
  207 0000015A D013            BEQ              on_screen   ;lower byte frames
  208 0000015C F04F 0308       MOV              R3,#8
  209 00000160         
  210 00000160 F105 054C       ADD              R5,R5,#0x4C
  211 00000164 F1A6 0608       SUB              R6,R6,#0x08
  212 00000168 F816 1B01 
                       bat_memo2
                               LDRB             R1,[R6],#1
  213 0000016C FA01 F102       LSL              R1,R1,R2
  214 00000170 EA4F 2111       LSR              R1,R1,#8
  215 00000174 7828            LDRB             R0,[R5]
  216 00000176 EA41 0100       ORR              R1,R1,R0
  217 0000017A F805 1B01       STRB             R1,[R5],#1
  218 0000017E 1E5B            SUBS             R3,R3,#1
  219 00000180 D1F2            BNE              bat_memo2
  220 00000182         
  221 00000182 E7FF            B                on_screen
  222 00000184         
  223 00000184         ;*******************************************************
                       ********
  224 00000184         ;write screen stage
  225 00000184         ;*******************************************************
                       ********   
  226 00000184         
  227 00000184 4D27    on_screen
                               LDR              R5,=OLD_SHIP_LOC_X ;extract X c
                                                            oordinate
  228 00000186 7828            LDRB             R0,[R5]
  229 00000188 4D25            LDR              R5,=OLD_SHIP_LOC_Y ;extract Y c
                                                            oordinate
  230 0000018A 7829            LDRB             R1,[R5]
  231 0000018C F001 0207       AND              R2,R1,#0x07 ;extract fractional
                                                             Y coordinate
  232 00000190 EA4F 01D1       LSR              R1,R1,#0x03 ;extract whole part
                                                            
  233 00000194         
  234 00000194 EA4F 2401       LSL              R4,R1,#8
  235 00000198 4404            ADD              R4,R4,R0
  236 0000019A F7FF FFFE       BL               ADDRESS_CHANGE
  237 0000019E         
  238 0000019E F04F 0354       MOV              R3,#0x54
  239 000001A2 FB01 F303       MUL              R3,R1,R3    ;multiply Y coordin
                                                            ate with 84
  240 000001A6 4403            ADD              R3,R3,R0    ;find vertical mode
                                                             address of pixel
  241 000001A8         
  242 000001A8 4D1F            LDR              R5,=PLAYFIELD ;take playfield a
                                                            ddress for writing 
                                                            op
  243 000001AA 441D            ADD              R5,R5,R3    ;adjust to ship loc
                                                            ation
  244 000001AC 4E21            LDR              R6,=SHIP_EMPTY ;take empty ship
                                                             pattern
  245 000001AE F04F 0308       MOV              R3,#8
  246 000001B2         
  247 000001B2 F815 0B01 
                       first_line
                               LDRB             R0,[R5],#1



ARM Macro Assembler    Page 7 


  248 000001B6 F816 1B01       LDRB             R1,[R6],#1
  249 000001BA FA01 F102       LSL              R1,R1,R2    ;shift with fractio
                                                            nal part to adjust 
                                                            ship
  250 000001BE F001 01FF       AND              R1,R1,#0xFF
  251 000001C2 EA41 0400       ORR              R4,R1,R0    ;combine field data
                                                             with ship data
  252 000001C6 F7FF FFFE       BL               DATA_WRITE  ;write to screen
  253 000001CA 1E5B            SUBS             R3,R3,#1
  254 000001CC D1F1            BNE              first_line
  255 000001CE         
  256 000001CE         
  257 000001CE 2A00            CMP              R2,#0x00    ;if data is divided
                                                             repeat same step f
                                                            or
  258 000001D0 D021            BEQ              endline     ;lower byte frames
  259 000001D2 F04F 0308       MOV              R3,#8
  260 000001D6         
  261 000001D6 4B13            LDR              R3,=OLD_SHIP_LOC_X ;extract X c
                                                            oordinate from newl
                                                            y written memory
  262 000001D8 7818            LDRB             R0,[R3]
  263 000001DA 4B11            LDR              R3,=OLD_SHIP_LOC_Y ;extract Y c
                                                            oordinate from newl
                                                            y written memory
  264 000001DC 7819            LDRB             R1,[R3]
  265 000001DE EA4F 01D1       LSR              R1,R1,#0x03 ;extract whole part
                                                            
  266 000001E2 F101 0101       ADD              R1,R1,#0x01 ;increment Y locati
                                                            on
  267 000001E6 EA4F 2101       LSL              R1,R1,#0x08
  268 000001EA EB01 0400       ADD              R4,R1,R0
  269 000001EE F7FF FFFE       BL               ADDRESS_CHANGE
  270 000001F2         
  271 000001F2 F04F 0308       MOV              R3,#8
  272 000001F6 4E0F            LDR              R6,=SHIP_EMPTY ;take empty ship
                                                             pattern   
  273 000001F8 F105 054C       ADD              R5,R5,#0x4C
  274 000001FC F816 1B01 
                       second_line
                               LDRB             R1,[R6],#1
  275 00000200 FA01 F102       LSL              R1,R1,R2    ;shift with fractio
                                                            nal part to adjust 
                                                            ship
  276 00000204 EA4F 2111       LSR              R1,R1,#8
  277 00000208 7828            LDRB             R0,[R5]
  278 0000020A EA41 0400       ORR              R4,R1,R0    ;combine field data
                                                             with ship data
  279 0000020E F7FF FFFE       BL               DATA_WRITE  ;write to screen
  280 00000212 1E5B            SUBS             R3,R3,#1
  281 00000214 D1F2            BNE              second_line
  282 00000216         
  283 00000216         endline
  284 00000216         
  285 00000216 BC1F            POP              {R0-R4}
  286 00000218 F85D EB04       POP              {LR}
  287 0000021C 4770            BX               LR
  288 0000021E         ;*******************************************************
                       ********



ARM Macro Assembler    Page 8 


  289 0000021E         ; End of the program  section
  290 0000021E         ;*******************************************************
                       ********
  291 0000021E         ;LABEL      DIRECTIVE       VALUE                       
                           COMMENT
  292 0000021E                 ENDP
  293 0000021E 00 00           ALIGN
  294 00000220                 END
              20001001 
              20001000 
              20000600 
              20000808 
              20000810 
              20000800 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\ship_cursor.d -o.\objects\ship_cursor.o -I.\RTE\_Targ
et_1 -ID:\Work\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -ID:\Work\AR
M\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA
 526" --predefine="TM4C123GH6PM SETA 1" --list=.\listings\ship_cursor.lst SHIP_
CURSOR.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

sdata 00000000

Symbol: sdata
   Definitions
      At line 19 in file SHIP_CURSOR.s
   Uses
      None
Comment: sdata unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Clear 00000020

Symbol: Clear
   Definitions
      At line 60 in file SHIP_CURSOR.s
   Uses
      None
Comment: Clear unused
SHIP_CURSOR 00000000

Symbol: SHIP_CURSOR
   Definitions
      At line 42 in file SHIP_CURSOR.s
   Uses
      At line 32 in file SHIP_CURSOR.s
Comment: SHIP_CURSOR used once
Skip_clear 0000008C

Symbol: Skip_clear
   Definitions
      At line 113 in file SHIP_CURSOR.s
   Uses
      At line 56 in file SHIP_CURSOR.s
      At line 88 in file SHIP_CURSOR.s

bat_memo 0000013E

Symbol: bat_memo
   Definitions
      At line 197 in file SHIP_CURSOR.s
   Uses
      At line 204 in file SHIP_CURSOR.s
Comment: bat_memo used once
bat_memo2 00000168

Symbol: bat_memo2
   Definitions
      At line 212 in file SHIP_CURSOR.s
   Uses
      At line 219 in file SHIP_CURSOR.s
Comment: bat_memo2 used once
battleship 0000011A

Symbol: battleship
   Definitions
      At line 181 in file SHIP_CURSOR.s
   Uses
      At line 128 in file SHIP_CURSOR.s
Comment: battleship used once
civ_memo 000000D4

Symbol: civ_memo
   Definitions
      At line 151 in file SHIP_CURSOR.s
   Uses
      At line 158 in file SHIP_CURSOR.s
Comment: civ_memo used once
civ_memo2 000000FE




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: civ_memo2
   Definitions
      At line 166 in file SHIP_CURSOR.s
   Uses
      At line 173 in file SHIP_CURSOR.s
Comment: civ_memo2 used once
civilian 000000B0

Symbol: civilian
   Definitions
      At line 135 in file SHIP_CURSOR.s
   Uses
      At line 126 in file SHIP_CURSOR.s
Comment: civilian used once
endline 00000216

Symbol: endline
   Definitions
      At line 283 in file SHIP_CURSOR.s
   Uses
      At line 258 in file SHIP_CURSOR.s
Comment: endline used once
first_line 000001B2

Symbol: first_line
   Definitions
      At line 247 in file SHIP_CURSOR.s
   Uses
      At line 254 in file SHIP_CURSOR.s
Comment: first_line used once
on_screen 00000184

Symbol: on_screen
   Definitions
      At line 227 in file SHIP_CURSOR.s
   Uses
      At line 129 in file SHIP_CURSOR.s
      At line 161 in file SHIP_CURSOR.s
      At line 175 in file SHIP_CURSOR.s
      At line 207 in file SHIP_CURSOR.s
      At line 221 in file SHIP_CURSOR.s

playfield 00000048

Symbol: playfield
   Definitions
      At line 79 in file SHIP_CURSOR.s
   Uses
      At line 82 in file SHIP_CURSOR.s
Comment: playfield used once
playfield2 00000080

Symbol: playfield2
   Definitions
      At line 104 in file SHIP_CURSOR.s
   Uses
      At line 107 in file SHIP_CURSOR.s
Comment: playfield2 used once
routines 00000000



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: routines
   Definitions
      At line 26 in file SHIP_CURSOR.s
   Uses
      None
Comment: routines unused
second_line 000001FC

Symbol: second_line
   Definitions
      At line 274 in file SHIP_CURSOR.s
   Uses
      At line 281 in file SHIP_CURSOR.s
Comment: second_line used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

OLD_SHIP_LOC_X 20001000

Symbol: OLD_SHIP_LOC_X
   Definitions
      At line 8 in file SHIP_CURSOR.s
   Uses
      At line 49 in file SHIP_CURSOR.s
      At line 66 in file SHIP_CURSOR.s
      At line 95 in file SHIP_CURSOR.s
      At line 116 in file SHIP_CURSOR.s
      At line 135 in file SHIP_CURSOR.s
      At line 181 in file SHIP_CURSOR.s
      At line 227 in file SHIP_CURSOR.s
      At line 261 in file SHIP_CURSOR.s

OLD_SHIP_LOC_Y 20001001

Symbol: OLD_SHIP_LOC_Y
   Definitions
      At line 9 in file SHIP_CURSOR.s
   Uses
      At line 46 in file SHIP_CURSOR.s
      At line 61 in file SHIP_CURSOR.s
      At line 85 in file SHIP_CURSOR.s
      At line 90 in file SHIP_CURSOR.s
      At line 119 in file SHIP_CURSOR.s
      At line 137 in file SHIP_CURSOR.s
      At line 183 in file SHIP_CURSOR.s
      At line 229 in file SHIP_CURSOR.s
      At line 263 in file SHIP_CURSOR.s

OUT_PORTB_DC 40005008

Symbol: OUT_PORTB_DC
   Definitions
      At line 6 in file SHIP_CURSOR.s
   Uses
      None
Comment: OUT_PORTB_DC unused
PLAYFIELD 20000600

Symbol: PLAYFIELD
   Definitions
      At line 10 in file SHIP_CURSOR.s
   Uses
      At line 75 in file SHIP_CURSOR.s
      At line 146 in file SHIP_CURSOR.s
      At line 192 in file SHIP_CURSOR.s
      At line 242 in file SHIP_CURSOR.s

SHIP_BATTLE 20000810

Symbol: SHIP_BATTLE
   Definitions
      At line 13 in file SHIP_CURSOR.s
   Uses
      At line 194 in file SHIP_CURSOR.s
Comment: SHIP_BATTLE used once
SHIP_CIVIL 20000808



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: SHIP_CIVIL
   Definitions
      At line 12 in file SHIP_CURSOR.s
   Uses
      At line 148 in file SHIP_CURSOR.s
Comment: SHIP_CIVIL used once
SHIP_EMPTY 20000800

Symbol: SHIP_EMPTY
   Definitions
      At line 11 in file SHIP_CURSOR.s
   Uses
      At line 244 in file SHIP_CURSOR.s
      At line 272 in file SHIP_CURSOR.s

7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ADDRESS_CHANGE 00000000

Symbol: ADDRESS_CHANGE
   Definitions
      At line 30 in file SHIP_CURSOR.s
   Uses
      At line 69 in file SHIP_CURSOR.s
      At line 99 in file SHIP_CURSOR.s
      At line 236 in file SHIP_CURSOR.s
      At line 269 in file SHIP_CURSOR.s

DATA_WRITE 00000000

Symbol: DATA_WRITE
   Definitions
      At line 31 in file SHIP_CURSOR.s
   Uses
      At line 80 in file SHIP_CURSOR.s
      At line 105 in file SHIP_CURSOR.s
      At line 252 in file SHIP_CURSOR.s
      At line 279 in file SHIP_CURSOR.s

DELAY_1ms 00000000

Symbol: DELAY_1ms
   Definitions
      At line 29 in file SHIP_CURSOR.s
   Uses
      None
Comment: DELAY_1ms unused
3 symbols
363 symbols in table
