


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ******** 
    2 00000000         ; EQU Directives
    3 00000000         ; These directives do not allocate memory
    4 00000000         ;*******************************************************
                       ********
    5 00000000         ;SYMBOL    DIRECTIVE VALUE   COMMENT
    6 00000000 40005008 
                       OUT_PORTB_DC
                               EQU              0x40005008  ;00000010
    7 00000000         
    8 00000000 20001000 
                       OLD_CURSOR_LOC_X
                               EQU              0x20001000  ;1000
    9 00000000 20001001 
                       OLD_CURSOR_LOC_Y
                               EQU              0x20001001  ;1001
   10 00000000 20002000 
                       MINEFIELD
                               EQU              0x20002000  ;2000-21F
   11 00000000 20000818 
                       CURSOR  EQU              0x20000818  ;818-81A
   12 00000000 2000081B 
                       MINE    EQU              0x2000081B  ;81B-81D
   13 00000000         
   14 00000000         ;*******************************************************
                       ********
   15 00000000         ; Directives - This Data Section is part of the code
   16 00000000         ; It is in the read only section  so values cannot be ch
                       anged.
   17 00000000         ;*******************************************************
                       ******** 
   18 00000000         ;LABEL  DIRECTIVE VALUE     COMMENT
   19 00000000                 AREA             sdata, DATA, READONLY
   20 00000000                 THUMB
   21 00000000         
   22 00000000         ;*******************************************************
                       ********
   23 00000000         ; Program section           
   24 00000000         ;*******************************************************
                       ********
   25 00000000         ;LABEL  DIRECTIVE VALUE     COMMENT
   26 00000000                 AREA             routines,READONLY,CODE
   27 00000000                 THUMB
   28 00000000                 ALIGN
   29 00000000                 EXTERN           DELAY_1ms
   30 00000000                 EXTERN           ADDRESS_CHANGE
   31 00000000                 EXTERN           DATA_WRITE
   32 00000000                 EXPORT           MINE_CURSOR
   33 00000000         
   34 00000000         ;*******************************************************
                       ********
   35 00000000         ; Main Function
   36 00000000         ; Takes Op mode, y location and x location
   37 00000000         ; Data format M = 
   38 00000000         ; 0000.00MM.0000.0000.YYYY.YYYY.XXXX.XXXX
   39 00000000         ;*******************************************************
                       ******** 
   40 00000000         ;LABEL  DIRECTIVE VALUE     COMMENT



ARM Macro Assembler    Page 2 


   41 00000000         MINE_CURSOR
                               PROC
   42 00000000 B500            PUSH             {LR}
   43 00000002 B41F            PUSH             {R0-R4}
   44 00000004         
   45 00000004 F240 6501       LDR              R5,=0x0601
   46 00000008 EBA4 0405       SUB              R4,R4,R5
   47 0000000C         
   48 0000000C         
   49 0000000C 4D73            LDR              R5,=OLD_CURSOR_LOC_Y
   50 0000000E 7828            LDRB             R0,[R5]
   51 00000010 EA4F 2000       LSL              R0,R0,#8
   52 00000014 4D72            LDR              R5,=OLD_CURSOR_LOC_X
   53 00000016 7829            LDRB             R1,[R5]
   54 00000018 4408            ADD              R0,R0,R1
   55 0000001A F64F 72FF       LDR              R2,=0xFFFF
   56 0000001E EA04 0102       AND              R1,R4,R2    ;Compare new locati
                                                            on with old one
   57 00000022 B410            PUSH             {R4}        ;Save R4 
   58 00000024 4281            CMP              R1,R0
   59 00000026 D03C            BEQ              Skip_clear  ;if they are same s
                                                            kip clear phase
   60 00000028         
   61 00000028         ;*******************************************************
                       ********
   62 00000028         ;clear screen stage
   63 00000028         ;*******************************************************
                       ********  
   64 00000028         
   65 00000028         Clear
   66 00000028 4D6C            LDR              R5,=OLD_CURSOR_LOC_Y
   67 0000002A 7828            LDRB             R0,[R5]
   68 0000002C EA4F 00D0       LSR              R0,R0,#3    ;Extract the fracti
                                                            onal part
   69 00000030 EA4F 2400       LSL              R4,R0,#8
   70 00000034         
   71 00000034 4D6A            LDR              R5,=OLD_CURSOR_LOC_X
   72 00000036 7829            LDRB             R1,[R5]
   73 00000038 440C            ADD              R4,R4,R1    ;create Yloc-Xloc s
                                                            tructure for addres
                                                            s change
   74 0000003A 4627            MOV              R7,R4       ;preserve last writ
                                                            ten address in R7
   75 0000003C F7FF FFFE       BL               ADDRESS_CHANGE
   76 00000040         
   77 00000040 F04F 0354       MOV              R3,#0x54
   78 00000044 FB00 F203       MUL              R2,R0,R3    ;multiply Y coordin
                                                            ate with 84
   79 00000048 440A            ADD              R2,R2,R1    ;find vertical mode
                                                             address of pixel
   80 0000004A         
   81 0000004A F04F 2520       LDR              R5,=MINEFIELD
   82 0000004E 4415            ADD              R5,R5,R2    ;find corresponding
                                                             address of R5
   83 00000050 F04F 0303       MOV              R3,#3       ;write 3 byte of da
                                                            ta
   84 00000054         
   85 00000054 F815 4B01 
                       minefield



ARM Macro Assembler    Page 3 


                               LDRB             R4,[R5],#1
   86 00000058 F7FF FFFE       BL               DATA_WRITE
   87 0000005C F107 0701       ADD              R7,R7,#1
   88 00000060 1E5B            SUBS             R3,R3,#1
   89 00000062 D1F7            BNE              minefield
   90 00000064         
   91 00000064         
   92 00000064 4B5D            LDR              R3,=OLD_CURSOR_LOC_Y
   93 00000066 7818            LDRB             R0,[R3]
   94 00000068 F010 0107       ANDS             R1,R0,#0x07 ;control fractional
                                                             part
   95 0000006C D019            BEQ              Skip_clear
   96 0000006E         
   97 0000006E 4B5B            LDR              R3,=OLD_CURSOR_LOC_Y
   98 00000070 7818            LDRB             R0,[R3]
   99 00000072 EA4F 00D0       LSR              R0,R0,#3    ;Extract the fracti
                                                            onal part
  100 00000076 EA4F 2400       LSL              R4,R0,#8
  101 0000007A         
  102 0000007A 4B59            LDR              R3,=OLD_CURSOR_LOC_X
  103 0000007C 7819            LDRB             R1,[R3]
  104 0000007E 440C            ADD              R4,R4,R1    ;create Yloc-Xloc s
                                                            tructure for addres
                                                            s change
  105 00000080 F504 7480       ADD              R4,R4,#0x100 ;jump to next line
                                                            
  106 00000084 4627            MOV              R7,R4
  107 00000086 F7FF FFFE       BL               ADDRESS_CHANGE
  108 0000008A         
  109 0000008A F105 0551       ADD              R5,R5,#0x51
  110 0000008E F04F 0303       MOV              R3,#3
  111 00000092         
  112 00000092 F815 4B01 
                       minefield2
                               LDRB             R4,[R5],#1
  113 00000096 F7FF FFFE       BL               DATA_WRITE
  114 0000009A F107 0701       ADD              R7,R7,#1
  115 0000009E 1E5B            SUBS             R3,R3,#1
  116 000000A0 D1F7            BNE              minefield2
  117 000000A2         
  118 000000A2         
  119 000000A2         ;*******************************************************
                       ********
  120 000000A2         ; case determine stage
  121 000000A2         ;*******************************************************
                       ********
  122 000000A2         
  123 000000A2         
  124 000000A2 BC10    Skip_clear
                               POP              {R4}
  125 000000A4 EA4F 6314       LSR              R3,R4,#0x18 ;extact operation f
                                                            rom coordinates
  126 000000A8         
  127 000000A8 4D4D            LDR              R5,=OLD_CURSOR_LOC_X
  128 000000AA F004 00FF       AND              R0,R4,#0xFF
  129 000000AE 7028            STRB             R0,[R5]
  130 000000B0 4D4A            LDR              R5,=OLD_CURSOR_LOC_Y
  131 000000B2 F404 407F       AND              R0,R4,#0xFF00
  132 000000B6 EA4F 2010       LSR              R0,R0,#8



ARM Macro Assembler    Page 4 


  133 000000BA 7028            STRB             R0,[R5]
  134 000000BC         
  135 000000BC         
  136 000000BC 2B01            CMP              R3,#0x01
  137 000000BE D002            BEQ              mine
  138 000000C0 2B10            CMP              R3,#0x10
  139 000000C2 D000            BEQ              mine
  140 000000C4 E035            B                on_screen
  141 000000C6         
  142 000000C6         ;*******************************************************
                       ********
  143 000000C6         ;mine placement stage
  144 000000C6         ;*******************************************************
                       ********
  145 000000C6         
  146 000000C6 4D46    mine    LDR              R5,=OLD_CURSOR_LOC_X ;extract X
                                                             coordinate
  147 000000C8 7828            LDRB             R0,[R5]
  148 000000CA 4D44            LDR              R5,=OLD_CURSOR_LOC_Y ;extract Y
                                                             coordinate
  149 000000CC 7829            LDRB             R1,[R5]
  150 000000CE F001 0207       AND              R2,R1,#0x07 ;extract fractional
                                                             Y coordinate
  151 000000D2 EA4F 01D1       LSR              R1,R1,#0x03 ;extract whole part
                                                            
  152 000000D6         
  153 000000D6 F04F 0354       MOV              R3,#0x54
  154 000000DA FB01 F303       MUL              R3,R1,R3    ;multiply Y coordin
                                                            ate with 84
  155 000000DE 4403            ADD              R3,R3,R0    ;find vertical mode
                                                             address of pixel
  156 000000E0         
  157 000000E0 F04F 2520       LDR              R5,=MINEFIELD ;take minefield a
                                                            ddress for writing 
                                                            op
  158 000000E4 441D            ADD              R5,R5,R3    ;adjust to mine loc
                                                            ation
  159 000000E6 4E3F            LDR              R6,=MINE    ;take mine pattern
  160 000000E8 F04F 0303       MOV              R3,#3
  161 000000EC         
  162 000000EC 7828    mine_memo
                               LDRB             R0,[R5]
  163 000000EE F816 1B01       LDRB             R1,[R6],#1
  164 000000F2 FA01 F102       LSL              R1,R1,R2    ;shift with fractio
                                                            nal part to adjust 
                                                            mine
  165 000000F6 F001 01FF       AND              R1,R1,#0xFF
  166 000000FA EA41 0100       ORR              R1,R1,R0    ;combine field data
                                                             with mine data
  167 000000FE F805 1B01       STRB             R1,[R5],#1  ;write into the mem
                                                            ory
  168 00000102 1E5B            SUBS             R3,R3,#1
  169 00000104 D1F2            BNE              mine_memo
  170 00000106         
  171 00000106 2A00            CMP              R2,#0x00    ;if data is divided
                                                             repeat same step f
                                                            or
  172 00000108 D013            BEQ              on_screen   ;lower byte frames
  173 0000010A F04F 0303       MOV              R3,#3



ARM Macro Assembler    Page 5 


  174 0000010E         
  175 0000010E F105 0551       ADD              R5,R5,#0x51
  176 00000112 F1A6 0603       SUB              R6,R6,#0x03
  177 00000116 F816 1B01 
                       mine_memo2
                               LDRB             R1,[R6],#1
  178 0000011A FA01 F102       LSL              R1,R1,R2
  179 0000011E EA4F 2111       LSR              R1,R1,#8
  180 00000122 7828            LDRB             R0,[R5]
  181 00000124 EA41 0100       ORR              R1,R1,R0
  182 00000128 F805 1B01       STRB             R1,[R5],#1
  183 0000012C 1E5B            SUBS             R3,R3,#1
  184 0000012E D1F2            BNE              mine_memo2
  185 00000130         
  186 00000130 E7FF            B                on_screen
  187 00000132         
  188 00000132         ;*******************************************************
                       ********
  189 00000132         ;write screen stage
  190 00000132         ;*******************************************************
                       ********   
  191 00000132         
  192 00000132 4D2B    on_screen
                               LDR              R5,=OLD_CURSOR_LOC_X ;extract X
                                                             coordinate
  193 00000134 7828            LDRB             R0,[R5]
  194 00000136 4D29            LDR              R5,=OLD_CURSOR_LOC_Y ;extract Y
                                                             coordinate
  195 00000138 7829            LDRB             R1,[R5]
  196 0000013A F001 0207       AND              R2,R1,#0x07 ;extract fractional
                                                             Y coordinate
  197 0000013E EA4F 01D1       LSR              R1,R1,#0x03 ;extract whole part
                                                            
  198 00000142         
  199 00000142 EA4F 2401       LSL              R4,R1,#8
  200 00000146 4404            ADD              R4,R4,R0
  201 00000148 4627            MOV              R7,R4
  202 0000014A F7FF FFFE       BL               ADDRESS_CHANGE
  203 0000014E         
  204 0000014E F04F 0354       MOV              R3,#0x54
  205 00000152 FB01 F303       MUL              R3,R1,R3    ;multiply Y coordin
                                                            ate with 84
  206 00000156 4403            ADD              R3,R3,R0    ;find vertical mode
                                                             address of pixel
  207 00000158         
  208 00000158 F04F 2520       LDR              R5,=MINEFIELD ;take playfield a
                                                            ddress for writing 
                                                            op
  209 0000015C 441D            ADD              R5,R5,R3    ;adjust to ship loc
                                                            ation
  210 0000015E 4E22            LDR              R6,=CURSOR  ;take empty ship pa
                                                            ttern
  211 00000160 F04F 0303       MOV              R3,#3
  212 00000164         
  213 00000164 F815 0B01 
                       first_line
                               LDRB             R0,[R5],#1
  214 00000168 F816 1B01       LDRB             R1,[R6],#1
  215 0000016C FA01 F102       LSL              R1,R1,R2    ;shift with fractio



ARM Macro Assembler    Page 6 


                                                            nal part to adjust 
                                                            ship
  216 00000170 F001 01FF       AND              R1,R1,#0xFF
  217 00000174 EA41 0400       ORR              R4,R1,R0    ;combine field data
                                                             with ship data
  218 00000178 F7FF FFFE       BL               DATA_WRITE  ;write to screen
  219 0000017C F107 0701       ADD              R7,R7,#1
  220 00000180 1E5B            SUBS             R3,R3,#1
  221 00000182 D1EF            BNE              first_line
  222 00000184         
  223 00000184         
  224 00000184 2A00            CMP              R2,#0x00    ;if data is divided
                                                             repeat same step f
                                                            or
  225 00000186 D024            BEQ              endline     ;lower byte frames
  226 00000188         
  227 00000188         
  228 00000188 4B15            LDR              R3,=OLD_CURSOR_LOC_X ;extract X
                                                             coordinate from ne
                                                            wly written memory
  229 0000018A 7818            LDRB             R0,[R3]
  230 0000018C 4B13            LDR              R3,=OLD_CURSOR_LOC_Y ;extract Y
                                                             coordinate from ne
                                                            wly written memory
  231 0000018E 7819            LDRB             R1,[R3]
  232 00000190 EA4F 01D1       LSR              R1,R1,#0x03 ;extract whole part
                                                            
  233 00000194 F101 0101       ADD              R1,R1,#0x01 ;increment Y locati
                                                            on
  234 00000198 EA4F 2101       LSL              R1,R1,#0x08
  235 0000019C EB01 0400       ADD              R4,R1,R0
  236 000001A0 4627            MOV              R7,R4
  237 000001A2 F7FF FFFE       BL               ADDRESS_CHANGE
  238 000001A6         
  239 000001A6 F04F 0303       MOV              R3,#3
  240 000001AA 4E0F            LDR              R6,=CURSOR  ;take cursor patter
                                                            n   
  241 000001AC F105 0551       ADD              R5,R5,#0x51
  242 000001B0 F816 1B01 
                       second_line
                               LDRB             R1,[R6],#1
  243 000001B4 FA01 F102       LSL              R1,R1,R2    ;shift with fractio
                                                            nal part to adjust 
                                                            cursor
  244 000001B8 EA4F 2111       LSR              R1,R1,#8
  245 000001BC F001 01FF       AND              R1,R1,#0xFF
  246 000001C0 7828            LDRB             R0,[R5]
  247 000001C2 EA41 0400       ORR              R4,R1,R0    ;combine field data
                                                             with mine data
  248 000001C6 F7FF FFFE       BL               DATA_WRITE  ;write to screen
  249 000001CA F107 0701       ADD              R7,R7,#1
  250 000001CE 1E5B            SUBS             R3,R3,#1
  251 000001D0 D1EE            BNE              second_line
  252 000001D2         
  253 000001D2         endline
  254 000001D2         
  255 000001D2 BC1F            POP              {R0-R4}
  256 000001D4 F85D EB04       POP              {LR}
  257 000001D8 4770            BX               LR



ARM Macro Assembler    Page 7 


  258 000001DA         ;*******************************************************
                       ********
  259 000001DA         ; End of the program  section
  260 000001DA         ;*******************************************************
                       ********
  261 000001DA         ;LABEL      DIRECTIVE       VALUE                       
                           COMMENT
  262 000001DA                 ENDP
  263 000001DA 00 00           ALIGN
  264 000001DC                 END
              20001001 
              20001000 
              2000081B 
              20000818 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\mine_cursor.d -o.\objects\mine_cursor.o -I.\RTE\_Targ
et_1 -ID:\Work\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -ID:\Work\AR
M\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA
 526" --predefine="TM4C123GH6PM SETA 1" --list=.\listings\mine_cursor.lst MINE_
CURSOR.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

sdata 00000000

Symbol: sdata
   Definitions
      At line 19 in file MINE_CURSOR.s
   Uses
      None
Comment: sdata unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Clear 00000028

Symbol: Clear
   Definitions
      At line 65 in file MINE_CURSOR.s
   Uses
      None
Comment: Clear unused
MINE_CURSOR 00000000

Symbol: MINE_CURSOR
   Definitions
      At line 41 in file MINE_CURSOR.s
   Uses
      At line 32 in file MINE_CURSOR.s
Comment: MINE_CURSOR used once
Skip_clear 000000A2

Symbol: Skip_clear
   Definitions
      At line 124 in file MINE_CURSOR.s
   Uses
      At line 59 in file MINE_CURSOR.s
      At line 95 in file MINE_CURSOR.s

endline 000001D2

Symbol: endline
   Definitions
      At line 253 in file MINE_CURSOR.s
   Uses
      At line 225 in file MINE_CURSOR.s
Comment: endline used once
first_line 00000164

Symbol: first_line
   Definitions
      At line 213 in file MINE_CURSOR.s
   Uses
      At line 221 in file MINE_CURSOR.s
Comment: first_line used once
mine 000000C6

Symbol: mine
   Definitions
      At line 146 in file MINE_CURSOR.s
   Uses
      At line 137 in file MINE_CURSOR.s
      At line 139 in file MINE_CURSOR.s

mine_memo 000000EC

Symbol: mine_memo
   Definitions
      At line 162 in file MINE_CURSOR.s
   Uses
      At line 169 in file MINE_CURSOR.s
Comment: mine_memo used once
mine_memo2 00000116



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: mine_memo2
   Definitions
      At line 177 in file MINE_CURSOR.s
   Uses
      At line 184 in file MINE_CURSOR.s
Comment: mine_memo2 used once
minefield 00000054

Symbol: minefield
   Definitions
      At line 85 in file MINE_CURSOR.s
   Uses
      At line 89 in file MINE_CURSOR.s
Comment: minefield used once
minefield2 00000092

Symbol: minefield2
   Definitions
      At line 112 in file MINE_CURSOR.s
   Uses
      At line 116 in file MINE_CURSOR.s
Comment: minefield2 used once
on_screen 00000132

Symbol: on_screen
   Definitions
      At line 192 in file MINE_CURSOR.s
   Uses
      At line 140 in file MINE_CURSOR.s
      At line 172 in file MINE_CURSOR.s
      At line 186 in file MINE_CURSOR.s

routines 00000000

Symbol: routines
   Definitions
      At line 26 in file MINE_CURSOR.s
   Uses
      None
Comment: routines unused
second_line 000001B0

Symbol: second_line
   Definitions
      At line 242 in file MINE_CURSOR.s
   Uses
      At line 251 in file MINE_CURSOR.s
Comment: second_line used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CURSOR 20000818

Symbol: CURSOR
   Definitions
      At line 11 in file MINE_CURSOR.s
   Uses
      At line 210 in file MINE_CURSOR.s
      At line 240 in file MINE_CURSOR.s

MINE 2000081B

Symbol: MINE
   Definitions
      At line 12 in file MINE_CURSOR.s
   Uses
      At line 159 in file MINE_CURSOR.s
Comment: MINE used once
MINEFIELD 20002000

Symbol: MINEFIELD
   Definitions
      At line 10 in file MINE_CURSOR.s
   Uses
      At line 81 in file MINE_CURSOR.s
      At line 157 in file MINE_CURSOR.s
      At line 208 in file MINE_CURSOR.s

OLD_CURSOR_LOC_X 20001000

Symbol: OLD_CURSOR_LOC_X
   Definitions
      At line 8 in file MINE_CURSOR.s
   Uses
      At line 52 in file MINE_CURSOR.s
      At line 71 in file MINE_CURSOR.s
      At line 102 in file MINE_CURSOR.s
      At line 127 in file MINE_CURSOR.s
      At line 146 in file MINE_CURSOR.s
      At line 192 in file MINE_CURSOR.s
      At line 228 in file MINE_CURSOR.s

OLD_CURSOR_LOC_Y 20001001

Symbol: OLD_CURSOR_LOC_Y
   Definitions
      At line 9 in file MINE_CURSOR.s
   Uses
      At line 49 in file MINE_CURSOR.s
      At line 66 in file MINE_CURSOR.s
      At line 92 in file MINE_CURSOR.s
      At line 97 in file MINE_CURSOR.s
      At line 130 in file MINE_CURSOR.s
      At line 148 in file MINE_CURSOR.s
      At line 194 in file MINE_CURSOR.s
      At line 230 in file MINE_CURSOR.s

OUT_PORTB_DC 40005008

Symbol: OUT_PORTB_DC



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 6 in file MINE_CURSOR.s
   Uses
      None
Comment: OUT_PORTB_DC unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ADDRESS_CHANGE 00000000

Symbol: ADDRESS_CHANGE
   Definitions
      At line 30 in file MINE_CURSOR.s
   Uses
      At line 75 in file MINE_CURSOR.s
      At line 107 in file MINE_CURSOR.s
      At line 202 in file MINE_CURSOR.s
      At line 237 in file MINE_CURSOR.s

DATA_WRITE 00000000

Symbol: DATA_WRITE
   Definitions
      At line 31 in file MINE_CURSOR.s
   Uses
      At line 86 in file MINE_CURSOR.s
      At line 113 in file MINE_CURSOR.s
      At line 218 in file MINE_CURSOR.s
      At line 248 in file MINE_CURSOR.s

DELAY_1ms 00000000

Symbol: DELAY_1ms
   Definitions
      At line 29 in file MINE_CURSOR.s
   Uses
      None
Comment: DELAY_1ms unused
3 symbols
359 symbols in table
