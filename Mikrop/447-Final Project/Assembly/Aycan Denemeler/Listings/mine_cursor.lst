


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ******** 
    2 00000000         ; EQU Directives
    3 00000000         ; These directives do not allocate memory
    4 00000000         ;*******************************************************
                       ********
    5 00000000         ;SYMBOL    DIRECTIVE VALUE   COMMENT
    6 00000000 40005008 
                       OUT_PORTB_DC
                               EQU              0x40005008  ;00000010
    7 00000000         
    8 00000000 20001000 
                       OLD_CURSOR_LOC_X
                               EQU              0x20001000  ;1000
    9 00000000 20001001 
                       OLD_CURSOR_LOC_Y
                               EQU              0x20001001  ;1001
   10 00000000 20002000 
                       MINEFIELD
                               EQU              0x20002000  ;600-7F7
   11 00000000 20000818 
                       CURSOR  EQU              0x20000818  ;818-81A
   12 00000000 2000081B 
                       MINE    EQU              0x2000081B  ;81B-81D
   13 00000000         
   14 00000000         ;*******************************************************
                       ********
   15 00000000         ; Directives - This Data Section is part of the code
   16 00000000         ; It is in the read only section  so values cannot be ch
                       anged.
   17 00000000         ;*******************************************************
                       ******** 
   18 00000000         ;LABEL  DIRECTIVE VALUE     COMMENT
   19 00000000                 AREA             sdata, DATA, READONLY
   20 00000000                 THUMB
   21 00000000         
   22 00000000         ;*******************************************************
                       ********
   23 00000000         ; Program section           
   24 00000000         ;*******************************************************
                       ********
   25 00000000         ;LABEL  DIRECTIVE VALUE     COMMENT
   26 00000000                 AREA             routines,READONLY,CODE
   27 00000000                 THUMB
   28 00000000                 ALIGN
   29 00000000                 EXTERN           DELAY_1ms
   30 00000000                 EXTERN           ADDRESS_CHANGE
   31 00000000                 EXTERN           DATA_WRITE
   32 00000000                 EXPORT           MINE_CURSOR
   33 00000000         
   34 00000000         ;*******************************************************
                       ********
   35 00000000         ; Main Function
   36 00000000         ; Takes Op mode, y location and x location
   37 00000000         ; Data format M = 
   38 00000000         ; 0000.00MM.0000.0000.YYYY.YYYY.XXXX.XXXX
   39 00000000         ;*******************************************************
                       ******** 
   40 00000000         ;LABEL  DIRECTIVE VALUE     COMMENT



ARM Macro Assembler    Page 2 


   41 00000000         MINE_CURSOR
                               PROC
   42 00000000 B500            PUSH             {LR}
   43 00000002 B41F            PUSH             {R0-R4}
   44 00000004         
   45 00000004         
   46 00000004 4D6D            LDR              R5,=OLD_CURSOR_LOC_Y
   47 00000006 7828            LDRB             R0,[R5]
   48 00000008 EA4F 2000       LSL              R0,R0,#8
   49 0000000C 4D6C            LDR              R5,=OLD_CURSOR_LOC_X
   50 0000000E 7829            LDRB             R1,[R5]
   51 00000010 4408            ADD              R0,R0,R1
   52 00000012 F64F 72FF       LDR              R2,=0xFFFF
   53 00000016 EA04 0102       AND              R1,R4,R2    ;Compare new locati
                                                            on with old one
   54 0000001A B410            PUSH             {R4}        ;Save R4 
   55 0000001C 4281            CMP              R1,R0
   56 0000001E D036            BEQ              Skip_clear  ;if they are same s
                                                            kip clear phase
   57 00000020         
   58 00000020         ;*******************************************************
                       ********
   59 00000020         ;clear screen stage
   60 00000020         ;*******************************************************
                       ********  
   61 00000020         
   62 00000020         Clear
   63 00000020 4D66            LDR              R5,=OLD_CURSOR_LOC_Y
   64 00000022 7828            LDRB             R0,[R5]
   65 00000024 EA4F 00D0       LSR              R0,R0,#3    ;Extract the fracti
                                                            onal part
   66 00000028 EA4F 2400       LSL              R4,R0,#8
   67 0000002C         
   68 0000002C 4D64            LDR              R5,=OLD_CURSOR_LOC_X
   69 0000002E 7829            LDRB             R1,[R5]
   70 00000030 440C            ADD              R4,R4,R1    ;create Yloc-Xloc s
                                                            tructure for addres
                                                            s change
   71 00000032 F7FF FFFE       BL               ADDRESS_CHANGE
   72 00000036         
   73 00000036 F04F 0354       MOV              R3,#0x54
   74 0000003A FB00 F203       MUL              R2,R0,R3    ;multiply Y coordin
                                                            ate with 84
   75 0000003E 440A            ADD              R2,R2,R1    ;find vertical mode
                                                             address of pixel
   76 00000040         
   77 00000040 F04F 2520       LDR              R5,=MINEFIELD
   78 00000044 4415            ADD              R5,R5,R2    ;find corresponding
                                                             address of R5
   79 00000046 F04F 0303       MOV              R3,#3       ;write 3 byte of da
                                                            ta
   80 0000004A         
   81 0000004A F815 4B01 
                       minefield
                               LDRB             R4,[R5],#1
   82 0000004E F7FF FFFE       BL               DATA_WRITE
   83 00000052 1E5B            SUBS             R3,R3,#1
   84 00000054 D1F9            BNE              minefield
   85 00000056         



ARM Macro Assembler    Page 3 


   86 00000056         
   87 00000056 4B59            LDR              R3,=OLD_CURSOR_LOC_Y
   88 00000058 7818            LDRB             R0,[R3]
   89 0000005A F010 0107       ANDS             R1,R0,#0x07 ;control fractional
                                                             part
   90 0000005E D016            BEQ              Skip_clear
   91 00000060         
   92 00000060 4B56            LDR              R3,=OLD_CURSOR_LOC_Y
   93 00000062 7818            LDRB             R0,[R3]
   94 00000064 EA4F 00D0       LSR              R0,R0,#3    ;Extract the fracti
                                                            onal part
   95 00000068 EA4F 2400       LSL              R4,R0,#8
   96 0000006C         
   97 0000006C 4B54            LDR              R3,=OLD_CURSOR_LOC_X
   98 0000006E 7819            LDRB             R1,[R3]
   99 00000070 440C            ADD              R4,R4,R1    ;create Yloc-Xloc s
                                                            tructure for addres
                                                            s change
  100 00000072 F504 7480       ADD              R4,R4,#0x100 ;jump to next line
                                                            
  101 00000076 F7FF FFFE       BL               ADDRESS_CHANGE
  102 0000007A         
  103 0000007A F105 0551       ADD              R5,R5,#0x51
  104 0000007E F04F 0303       MOV              R3,#3
  105 00000082         
  106 00000082 F815 4B01 
                       minefield2
                               LDRB             R4,[R5],#1
  107 00000086 F7FF FFFE       BL               DATA_WRITE
  108 0000008A 1E5B            SUBS             R3,R3,#1
  109 0000008C D1F9            BNE              minefield2
  110 0000008E         
  111 0000008E         
  112 0000008E         ;*******************************************************
                       ********
  113 0000008E         ; case determine stage
  114 0000008E         ;*******************************************************
                       ********
  115 0000008E         
  116 0000008E         
  117 0000008E BC10    Skip_clear
                               POP              {R4}
  118 00000090 EA4F 6314       LSR              R3,R4,#0x18 ;extact operation f
                                                            rom coordinates
  119 00000094         
  120 00000094 4D4A            LDR              R5,=OLD_CURSOR_LOC_X
  121 00000096 F004 00FF       AND              R0,R4,#0xFF
  122 0000009A 7028            STRB             R0,[R5]
  123 0000009C 4D47            LDR              R5,=OLD_CURSOR_LOC_Y
  124 0000009E F404 407F       AND              R0,R4,#0xFF00
  125 000000A2 EA4F 2010       LSR              R0,R0,#8
  126 000000A6 7028            STRB             R0,[R5]
  127 000000A8         
  128 000000A8         
  129 000000A8 2B01            CMP              R3,#0x01
  130 000000AA D002            BEQ              mine
  131 000000AC 2B02            CMP              R3,#0x02
  132 000000AE D000            BEQ              mine
  133 000000B0 E035            B                on_screen



ARM Macro Assembler    Page 4 


  134 000000B2         
  135 000000B2         ;*******************************************************
                       ********
  136 000000B2         ;mine placement stage
  137 000000B2         ;*******************************************************
                       ********
  138 000000B2         
  139 000000B2 4D43    mine    LDR              R5,=OLD_CURSOR_LOC_X ;extract X
                                                             coordinate
  140 000000B4 7828            LDRB             R0,[R5]
  141 000000B6 4D41            LDR              R5,=OLD_CURSOR_LOC_Y ;extract Y
                                                             coordinate
  142 000000B8 7829            LDRB             R1,[R5]
  143 000000BA F001 0207       AND              R2,R1,#0x07 ;extract fractional
                                                             Y coordinate
  144 000000BE EA4F 01D1       LSR              R1,R1,#0x03 ;extract whole part
                                                            
  145 000000C2         
  146 000000C2 F04F 0354       MOV              R3,#0x54
  147 000000C6 FB01 F303       MUL              R3,R1,R3    ;multiply Y coordin
                                                            ate with 84
  148 000000CA 4403            ADD              R3,R3,R0    ;find vertical mode
                                                             address of pixel
  149 000000CC         
  150 000000CC F04F 2520       LDR              R5,=MINEFIELD ;take minefield a
                                                            ddress for writing 
                                                            op
  151 000000D0 441D            ADD              R5,R5,R3    ;adjust to mine loc
                                                            ation
  152 000000D2 4E3C            LDR              R6,=MINE    ;take mine pattern
  153 000000D4 F04F 0303       MOV              R3,#3
  154 000000D8         
  155 000000D8 7828    mine_memo
                               LDRB             R0,[R5]
  156 000000DA F816 1B01       LDRB             R1,[R6],#1
  157 000000DE FA01 F102       LSL              R1,R1,R2    ;shift with fractio
                                                            nal part to adjust 
                                                            mine
  158 000000E2 F001 01FF       AND              R1,R1,#0xFF
  159 000000E6 EA41 0100       ORR              R1,R1,R0    ;combine field data
                                                             with mine data
  160 000000EA F805 1B01       STRB             R1,[R5],#1  ;write into the mem
                                                            ory
  161 000000EE 1E5B            SUBS             R3,R3,#1
  162 000000F0 D1F2            BNE              mine_memo
  163 000000F2         
  164 000000F2 2A00            CMP              R2,#0x00    ;if data is divided
                                                             repeat same step f
                                                            or
  165 000000F4 D013            BEQ              on_screen   ;lower byte frames
  166 000000F6 F04F 0303       MOV              R3,#3
  167 000000FA         
  168 000000FA F105 0551       ADD              R5,R5,#0x51
  169 000000FE F1A6 0603       SUB              R6,R6,#0x03
  170 00000102 F816 1B01 
                       mine_memo2
                               LDRB             R1,[R6],#1
  171 00000106 FA01 F102       LSL              R1,R1,R2
  172 0000010A EA4F 2111       LSR              R1,R1,#8



ARM Macro Assembler    Page 5 


  173 0000010E 7828            LDRB             R0,[R5]
  174 00000110 EA41 0100       ORR              R1,R1,R0
  175 00000114 F805 1B01       STRB             R1,[R5],#1
  176 00000118 1E5B            SUBS             R3,R3,#1
  177 0000011A D1F2            BNE              mine_memo2
  178 0000011C         
  179 0000011C E7FF            B                on_screen
  180 0000011E         
  181 0000011E         ;*******************************************************
                       ********
  182 0000011E         ;write screen stage
  183 0000011E         ;*******************************************************
                       ********   
  184 0000011E         
  185 0000011E 4D28    on_screen
                               LDR              R5,=OLD_CURSOR_LOC_X ;extract X
                                                             coordinate
  186 00000120 7828            LDRB             R0,[R5]
  187 00000122 4D26            LDR              R5,=OLD_CURSOR_LOC_Y ;extract Y
                                                             coordinate
  188 00000124 7829            LDRB             R1,[R5]
  189 00000126 F001 0207       AND              R2,R1,#0x07 ;extract fractional
                                                             Y coordinate
  190 0000012A EA4F 01D1       LSR              R1,R1,#0x03 ;extract whole part
                                                            
  191 0000012E         
  192 0000012E EA4F 2401       LSL              R4,R1,#8
  193 00000132 4404            ADD              R4,R4,R0
  194 00000134 F7FF FFFE       BL               ADDRESS_CHANGE
  195 00000138         
  196 00000138 F04F 0354       MOV              R3,#0x54
  197 0000013C FB01 F303       MUL              R3,R1,R3    ;multiply Y coordin
                                                            ate with 84
  198 00000140 4403            ADD              R3,R3,R0    ;find vertical mode
                                                             address of pixel
  199 00000142         
  200 00000142 F04F 2520       LDR              R5,=MINEFIELD ;take playfield a
                                                            ddress for writing 
                                                            op
  201 00000146 441D            ADD              R5,R5,R3    ;adjust to ship loc
                                                            ation
  202 00000148 4E1F            LDR              R6,=CURSOR  ;take empty ship pa
                                                            ttern
  203 0000014A F04F 0303       MOV              R3,#3
  204 0000014E         
  205 0000014E F815 0B01 
                       first_line
                               LDRB             R0,[R5],#1
  206 00000152 F816 1B01       LDRB             R1,[R6],#1
  207 00000156 FA01 F102       LSL              R1,R1,R2    ;shift with fractio
                                                            nal part to adjust 
                                                            ship
  208 0000015A F001 01FF       AND              R1,R1,#0xFF
  209 0000015E EA41 0400       ORR              R4,R1,R0    ;combine field data
                                                             with ship data
  210 00000162 F7FF FFFE       BL               DATA_WRITE  ;write to screen
  211 00000166 1E5B            SUBS             R3,R3,#1
  212 00000168 D1F1            BNE              first_line
  213 0000016A         



ARM Macro Assembler    Page 6 


  214 0000016A         
  215 0000016A 2A00            CMP              R2,#0x00    ;if data is divided
                                                             repeat same step f
                                                            or
  216 0000016C D021            BEQ              endline     ;lower byte frames
  217 0000016E         
  218 0000016E         
  219 0000016E 4B14            LDR              R3,=OLD_CURSOR_LOC_X ;extract X
                                                             coordinate from ne
                                                            wly written memory
  220 00000170 7818            LDRB             R0,[R3]
  221 00000172 4B12            LDR              R3,=OLD_CURSOR_LOC_Y ;extract Y
                                                             coordinate from ne
                                                            wly written memory
  222 00000174 7819            LDRB             R1,[R3]
  223 00000176 EA4F 01D1       LSR              R1,R1,#0x03 ;extract whole part
                                                            
  224 0000017A F101 0101       ADD              R1,R1,#0x01 ;increment Y locati
                                                            on
  225 0000017E EA4F 2101       LSL              R1,R1,#0x08
  226 00000182 EB01 0400       ADD              R4,R1,R0
  227 00000186 F7FF FFFE       BL               ADDRESS_CHANGE
  228 0000018A         
  229 0000018A F04F 0303       MOV              R3,#3
  230 0000018E 4E0E            LDR              R6,=CURSOR  ;take cursor patter
                                                            n   
  231 00000190 F105 0551       ADD              R5,R5,#0x51
  232 00000194 F816 1B01 
                       second_line
                               LDRB             R1,[R6],#1
  233 00000198 FA01 F102       LSL              R1,R1,R2    ;shift with fractio
                                                            nal part to adjust 
                                                            cursor
  234 0000019C EA4F 2111       LSR              R1,R1,#8
  235 000001A0 F001 01FF       AND              R1,R1,#0xFF
  236 000001A4 7828            LDRB             R0,[R5]
  237 000001A6 EA41 0400       ORR              R4,R1,R0    ;combine field data
                                                             with mine data
  238 000001AA F7FF FFFE       BL               DATA_WRITE  ;write to screen
  239 000001AE 1E5B            SUBS             R3,R3,#1
  240 000001B0 D1F0            BNE              second_line
  241 000001B2         
  242 000001B2         endline
  243 000001B2         
  244 000001B2 BC1F            POP              {R0-R4}
  245 000001B4 F85D EB04       POP              {LR}
  246 000001B8 4770            BX               LR
  247 000001BA         ;*******************************************************
                       ********
  248 000001BA         ; End of the program  section
  249 000001BA         ;*******************************************************
                       ********
  250 000001BA         ;LABEL      DIRECTIVE       VALUE                       
                           COMMENT
  251 000001BA                 ENDP
  252 000001BA 00 00           ALIGN
  253 000001BC                 END
              20001001 
              20001000 



ARM Macro Assembler    Page 7 


              2000081B 
              20000818 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\mine_cursor.d -o.\objects\mine_cursor.o -I.\RTE\_Targ
et_1 -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -IC:\Keil
_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSIO
N SETA 526" --predefine="TM4C123GH6PM SETA 1" --list=.\listings\mine_cursor.lst
 MINE_CURSOR.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

sdata 00000000

Symbol: sdata
   Definitions
      At line 19 in file MINE_CURSOR.s
   Uses
      None
Comment: sdata unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Clear 00000020

Symbol: Clear
   Definitions
      At line 62 in file MINE_CURSOR.s
   Uses
      None
Comment: Clear unused
MINE_CURSOR 00000000

Symbol: MINE_CURSOR
   Definitions
      At line 41 in file MINE_CURSOR.s
   Uses
      At line 32 in file MINE_CURSOR.s
Comment: MINE_CURSOR used once
Skip_clear 0000008E

Symbol: Skip_clear
   Definitions
      At line 117 in file MINE_CURSOR.s
   Uses
      At line 56 in file MINE_CURSOR.s
      At line 90 in file MINE_CURSOR.s

endline 000001B2

Symbol: endline
   Definitions
      At line 242 in file MINE_CURSOR.s
   Uses
      At line 216 in file MINE_CURSOR.s
Comment: endline used once
first_line 0000014E

Symbol: first_line
   Definitions
      At line 205 in file MINE_CURSOR.s
   Uses
      At line 212 in file MINE_CURSOR.s
Comment: first_line used once
mine 000000B2

Symbol: mine
   Definitions
      At line 139 in file MINE_CURSOR.s
   Uses
      At line 130 in file MINE_CURSOR.s
      At line 132 in file MINE_CURSOR.s

mine_memo 000000D8

Symbol: mine_memo
   Definitions
      At line 155 in file MINE_CURSOR.s
   Uses
      At line 162 in file MINE_CURSOR.s
Comment: mine_memo used once
mine_memo2 00000102



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: mine_memo2
   Definitions
      At line 170 in file MINE_CURSOR.s
   Uses
      At line 177 in file MINE_CURSOR.s
Comment: mine_memo2 used once
minefield 0000004A

Symbol: minefield
   Definitions
      At line 81 in file MINE_CURSOR.s
   Uses
      At line 84 in file MINE_CURSOR.s
Comment: minefield used once
minefield2 00000082

Symbol: minefield2
   Definitions
      At line 106 in file MINE_CURSOR.s
   Uses
      At line 109 in file MINE_CURSOR.s
Comment: minefield2 used once
on_screen 0000011E

Symbol: on_screen
   Definitions
      At line 185 in file MINE_CURSOR.s
   Uses
      At line 133 in file MINE_CURSOR.s
      At line 165 in file MINE_CURSOR.s
      At line 179 in file MINE_CURSOR.s

routines 00000000

Symbol: routines
   Definitions
      At line 26 in file MINE_CURSOR.s
   Uses
      None
Comment: routines unused
second_line 00000194

Symbol: second_line
   Definitions
      At line 232 in file MINE_CURSOR.s
   Uses
      At line 240 in file MINE_CURSOR.s
Comment: second_line used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CURSOR 20000818

Symbol: CURSOR
   Definitions
      At line 11 in file MINE_CURSOR.s
   Uses
      At line 202 in file MINE_CURSOR.s
      At line 230 in file MINE_CURSOR.s

MINE 2000081B

Symbol: MINE
   Definitions
      At line 12 in file MINE_CURSOR.s
   Uses
      At line 152 in file MINE_CURSOR.s
Comment: MINE used once
MINEFIELD 20002000

Symbol: MINEFIELD
   Definitions
      At line 10 in file MINE_CURSOR.s
   Uses
      At line 77 in file MINE_CURSOR.s
      At line 150 in file MINE_CURSOR.s
      At line 200 in file MINE_CURSOR.s

OLD_CURSOR_LOC_X 20001000

Symbol: OLD_CURSOR_LOC_X
   Definitions
      At line 8 in file MINE_CURSOR.s
   Uses
      At line 49 in file MINE_CURSOR.s
      At line 68 in file MINE_CURSOR.s
      At line 97 in file MINE_CURSOR.s
      At line 120 in file MINE_CURSOR.s
      At line 139 in file MINE_CURSOR.s
      At line 185 in file MINE_CURSOR.s
      At line 219 in file MINE_CURSOR.s

OLD_CURSOR_LOC_Y 20001001

Symbol: OLD_CURSOR_LOC_Y
   Definitions
      At line 9 in file MINE_CURSOR.s
   Uses
      At line 46 in file MINE_CURSOR.s
      At line 63 in file MINE_CURSOR.s
      At line 87 in file MINE_CURSOR.s
      At line 92 in file MINE_CURSOR.s
      At line 123 in file MINE_CURSOR.s
      At line 141 in file MINE_CURSOR.s
      At line 187 in file MINE_CURSOR.s
      At line 221 in file MINE_CURSOR.s

OUT_PORTB_DC 40005008

Symbol: OUT_PORTB_DC



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 6 in file MINE_CURSOR.s
   Uses
      None
Comment: OUT_PORTB_DC unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ADDRESS_CHANGE 00000000

Symbol: ADDRESS_CHANGE
   Definitions
      At line 30 in file MINE_CURSOR.s
   Uses
      At line 71 in file MINE_CURSOR.s
      At line 101 in file MINE_CURSOR.s
      At line 194 in file MINE_CURSOR.s
      At line 227 in file MINE_CURSOR.s

DATA_WRITE 00000000

Symbol: DATA_WRITE
   Definitions
      At line 31 in file MINE_CURSOR.s
   Uses
      At line 82 in file MINE_CURSOR.s
      At line 107 in file MINE_CURSOR.s
      At line 210 in file MINE_CURSOR.s
      At line 238 in file MINE_CURSOR.s

DELAY_1ms 00000000

Symbol: DELAY_1ms
   Definitions
      At line 29 in file MINE_CURSOR.s
   Uses
      None
Comment: DELAY_1ms unused
3 symbols
359 symbols in table
